# -*- coding: utf-8 -*-
"""Untitled58.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1VVkmCfQiZ2l4-OoP68YDHpB_Uk6QgjXS
"""

#imports
import pandas as pd
import numpy as pd
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import validation_curve
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
import matplotlib.pyplot as plt
import seaborn as sns
import keras

#read data
df = pd.read_csv('/content/sample_data/pub2-dataset.csv')
df

#shuffle data
df = df.sample(frac=1).reset_index()

df

df = df.drop('index', axis=1)
df

from sklearn. model_selection import train_test_split
y = df.pop('L')
x = df

x = x.values.reshape(x.shape[0], x.shape[1], 1)
print(x.shape)

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)

from keras.models import Sequential
from keras.layers import Dense, Conv1D, Flatten, MaxPooling1D
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix

#cnn-1d model
model = Sequential()
model.add(Conv1D(64, 2, activation="relu", input_shape=(1000,1)))
model.add(Dense(16, activation="relu"))
model.add(MaxPooling1D())
model.add(Flatten())
model.add(Dense(2, activation = 'softmax'))
model.compile(loss = 'sparse_categorical_crossentropy', 
     optimizer = "adam",               
              metrics = ['accuracy'])
model.summary()

#fit model
model.fit(x_train, y_train, batch_size=2,epochs=100, verbose=0)

acc = model.evaluate(x_train, y_train)
print("Loss:", acc[0], " Accuracy:", acc[1])

#metrics
pred = model.predict(x_test)
y_pred = pred.argmax(axis=-1)
cm = confusion_matrix(y_test, y_pred)
print(cm)
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import validation_curve
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
print("f1 score macro",metrics.f1_score(y_test , y_pred, average='macro')) 
print("precision score",metrics.precision_score(y_test, y_pred, average='macro'))
print("recall score",metrics.recall_score(y_test, y_pred, average='macro')) 
print("accuracy", metrics.accuracy_score(y_test, y_pred), "\n")