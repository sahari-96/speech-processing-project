# -*- coding: utf-8 -*-
"""Untitled56.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1INKT80MiCWLo6-aq2Ei3x0-f7YVRQbIb
"""

#imports 
import pandas as pd
import numpy as pd
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import confusion_matrix
from sklearn.model_selection import validation_curve
from sklearn.model_selection import KFold
from sklearn.model_selection import cross_val_score
import matplotlib.pyplot as plt
import seaborn as sns
import keras

df = pd.read_csv('/content/sample_data/pub1-dataset.csv')
df

for i in range(224):
 df.at[i, 'Label'] = '1'
for i in range(224, 243):
 df.at[i, 'Label'] = '0'
for i in range(243,608):
 df.at[i, 'Label'] = '1'
for i in range(608, 1032):
 df.at[i, 'Label'] = '0'
for i in range(1032, 1089):
 df.at[i, 'Label'] = '1'
for i in range(1089, 1751):
 df.at[i, 'Label'] = '0'
for i in range(1751, 2166):
 df.at[i, 'Label'] = '0'
for i in range(2166, 2558):
 df.at[i, 'Label'] = '1'
for i in range(2558, 2957):
 df.at[i, 'Label'] = '1'

df

df = df.sample(frac=1).reset_index()
df

from sklearn. model_selection import train_test_split
y = df.pop('Label')
x = df
x_train,x_test,y_train,y_test = train_test_split(x,y,test_size=0.2)

import pandas as pd
from sklearn import preprocessing

x_train = x_train.values #returns a numpy array
min_max_scaler = preprocessing.MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(x_train)
x_train = pd.DataFrame(x_scaled)

x_test = x_test.values #returns a numpy array
min_max_scaler = preprocessing.MinMaxScaler()
x_scaled = min_max_scaler.fit_transform(x_test)
x_test = pd.DataFrame(x_scaled)

# linear model

model_linear = SVC(kernel='linear')
model_linear.fit(x_train, y_train)

# predict
y_pred = model_linear.predict(x_test)

# confusion matrix, precison, recall and accuracy

from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.metrics import precision_recall_fscore_support
#precision, recall, fscore
print("f1 score macro",metrics.f1_score(y_test , y_pred, average='macro')) 
print("precision score",metrics.precision_score(y_test, y_pred, average='macro'))
print("recall score",metrics.recall_score(y_test, y_pred, average='macro')) 
# accuracy
print("accuracy:", metrics.accuracy_score(y_true=y_test, y_pred=y_pred), "\n")

# cm
print(metrics.confusion_matrix(y_true=y_test, y_pred=y_pred))

# model with optimal hyperparameters

# model
model = SVC(C=10, gamma=0.001, kernel="rbf")

model.fit(x_train, y_train)
y_pred = model.predict(x_test)

# metrics

print("f1 score macro",metrics.f1_score(y_test , y_pred, average='macro')) 
print("precision score",metrics.precision_score(y_test, y_pred, average='macro'))
print("recall score",metrics.recall_score(y_test, y_pred, average='macro')) 
print("accuracy", metrics.accuracy_score(y_test, y_pred), "\n")
print(metrics.confusion_matrix(y_test, y_pred), "\n")